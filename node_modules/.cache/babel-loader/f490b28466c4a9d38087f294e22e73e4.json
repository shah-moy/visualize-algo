{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSE499A\\\\al-khwarizmi\\\\src\\\\components\\\\algorithms\\\\InsertionSort.js\";\nimport React from 'react';\nimport { newTrace, addToTrace, createKey } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InsertionSort = nums => {\n  // Initial State\n  const trace = newTrace(nums); // Core Algorithm\n\n  for (let i = 1; i < nums.length; i++) {\n    let value = nums[i];\n    let hole = i; // Visualize: Hole has been selected for comparison\n\n    addToTrace(trace, nums, [], [i]);\n\n    while (hole > 0 && nums[hole - 1] > value) {\n      // Visualize: Compare hole to value\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\n      nums[hole] = nums[hole - 1];\n      hole -= 1; // Visualize: Overwrite hole with hole - 1\n\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\n    } // Visualize: Overwrite hole with value\n\n\n    addToTrace(trace, nums, [], [], [], [hole]);\n    nums[hole] = value; // Visualize: value is in sorted position\n\n    addToTrace(trace, nums, [], [], [], [hole]);\n  } // Visualize: Mark all elements as sorted\n\n\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\n  return trace;\n};\n\n_c = InsertionSort;\nexport const InsertionSortKey = createKey('Comparing', 'Swapping', 'Overwrite from memory');\nexport const InsertionSortP = {\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card post\",\n      Style: \"text-align:left\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"screen\",\n        Style: \"margin: 15px\",\n        children: [\"mark first element as sorted\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"swapped\",\n          Style: \"margin-left:20px\",\n          children: [\"for each unsorted element X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"change\",\n          Style: \"margin-left:40px\",\n          children: [\"'extract' the element X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"compare\",\n          className: \"Bar_stateA\",\n          Style: \"margin-left:60px\",\n          children: [\"for j = lastSortedIndex down to 0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"swap\",\n          Style: \"margin-left:80px\",\n          children: [\"if current element j > X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 37\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 50\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"swap\",\n          Style: \"margin-left:80px\",\n          children: [\"move sorted element to the right by 1 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"change\",\n          children: \"break loop and insert X here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this)\n};\nexport const InsertionSortDesc = {\n  title: 'Insertion Sort',\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Insertion_sort\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), ' ', \"is a simple sorting algorithm that iterates through an array and at each iteration it removes one element from the array, finds the location it belongs to in the sorted list and inserts it there, repeating until no elements remain in the unsorted list. It is an in-place, stable sorting algorithm that is inefficient on large input arrays but works well for data sets that are almost sorted. It is more efficient in practice compared to other quadratic sorting algorithms like bubble sort and selection sort.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this),\n  worstCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this),\n  avgCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this),\n  bestCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(n)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 13\n  }, this),\n  space: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(1)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this)\n};\nexport default InsertionSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"sources":["D:/CSE499A/al-khwarizmi/src/components/algorithms/InsertionSort.js"],"names":["React","newTrace","addToTrace","createKey","InsertionSort","nums","trace","i","length","value","hole","Array","keys","InsertionSortKey","InsertionSortP","description","InsertionSortDesc","title","worstCase","avgCase","bestCase","space"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { newTrace, addToTrace, createKey } from './helpers';\n\nconst InsertionSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  // Core Algorithm\n  for (let i = 1; i < nums.length; i++) {\n    let value = nums[i];\n    let hole = i;\n    // Visualize: Hole has been selected for comparison\n    addToTrace(trace, nums, [], [i]);\n    while (hole > 0 && nums[hole - 1] > value) {\n      // Visualize: Compare hole to value\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\n      nums[hole] = nums[hole - 1];\n      hole -= 1;\n      // Visualize: Overwrite hole with hole - 1\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\n    }\n    // Visualize: Overwrite hole with value\n    addToTrace(trace, nums, [], [], [], [hole]);\n    nums[hole] = value;\n    // Visualize: value is in sorted position\n    addToTrace(trace, nums, [], [], [], [hole]);\n  }\n\n  // Visualize: Mark all elements as sorted\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\n  return trace;\n};\n\nexport const InsertionSortKey = createKey(\n  'Comparing',\n  'Swapping',\n  'Overwrite from memory'\n);\n\n\n\nexport const InsertionSortP= {\n\n  description: (\n    <p>\n    <div className=\"card post\" Style=\"text-align:left\" > \n          <div id=\"screen\" Style=\"margin: 15px\">\n          mark first element as sorted<br/> \n                <span id=\"swapped\" Style=\"margin-left:20px\">\n                for each unsorted element X<br/>\n                  </span><br/>\n            <span id=\"change\" Style=\"margin-left:40px\" >\n            'extract' the element X<br/>\n            </span><br/>\n            <span id=\"compare\" className=\"Bar_stateA\" Style=\"margin-left:60px\">\n              for j = lastSortedIndex down to 0<br/>\n            </span><br/>\n            <span id=\"swap\" Style=\"margin-left:80px\">\n            if current element j > X<br/> </span><br/>\n            <span id=\"swap\"  Style=\"margin-left:80px\">\n            move sorted element to the right by 1 <br/>\n            </span><br/>\n            <span id=\"change\">break loop and insert X here</span>\n          </div></div>\n         \n    </p>\n  ),\n \n};\n\n\n\nexport const InsertionSortDesc = {\n  title: 'Insertion Sort',\n  description: (\n    <p>\n      <a\n        href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Insertion Sort\n      </a>{' '}\n      is a simple sorting algorithm that iterates through an array and\n      at each iteration it removes one element from the array, finds the\n      location it belongs to in the sorted list and inserts it there,\n      repeating until no elements remain in the unsorted list. It is an\n      in-place, stable sorting algorithm that is inefficient on large\n      input arrays but works well for data sets that are almost sorted.\n      It is more efficient in practice compared to other quadratic\n      sorting algorithms like bubble sort and selection sort.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: <span>O(n)</span>,\n  space: <span>O(1)</span>\n};\n\nexport default InsertionSort;\n"]},"metadata":{},"sourceType":"module"}