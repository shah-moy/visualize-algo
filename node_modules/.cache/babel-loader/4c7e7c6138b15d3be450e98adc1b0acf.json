{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSE499B\\\\visualize-algo\\\\src\\\\components\\\\algorithms\\\\SelectionSort.js\";\nimport React from 'react';\nimport { swap, newTrace, addToTrace, lastSorted, createKey } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionSort = nums => {\n  // Initial State\n  const trace = newTrace(nums); // Core Algorithm\n\n  for (let i = 0; i < nums.length - 1; i++) {\n    // Internal Loop: Find index of min value\n    let minIndex = i;\n\n    for (let j = i + 1; j < nums.length; j++) {\n      // Visualize: comparing A[j] to A[minIndex]\n      addToTrace(trace, nums, lastSorted(trace), [minIndex, j]);\n\n      if (nums[j] < nums[minIndex]) {\n        // Visualize: discovered new minIndex\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\n        minIndex = j; // Visualize: reassign new minIndex;\n\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\n      }\n    } // Visualize: i'th value to be swapped with min value\n\n\n    addToTrace(trace, nums, lastSorted(trace), [], [i, minIndex]);\n    swap(nums, i, minIndex); // Visualize: i'th value has been swapped with min value\n\n    addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\n  } // Visualize: Final item in the array is sorted\n\n\n  addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\n  return trace;\n};\n\n_c = SelectionSort;\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\nexport const SelectionSortP = {\n  l0: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"Selection Sort (Array,n)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this),\n  l1: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 15px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \" for: i=1 to LastIndex-1 do  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 35\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 8\n  }, this),\n  l2: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: [\"  minimum = i \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this),\n  l3: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \" for: j= i+ 1 to LastIndex-1 do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this),\n  l4: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 40px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      alignmentBaseline: true,\n      children: \"if Array[j] < Array[minimum]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this),\n  l5: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 55px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"minimum = j\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this),\n  l6: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"swap Array[i] and Array[minimum]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this),\n  l7: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"end SelectionSort \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 6\n  }, this),\n  l8: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 6\n  }, this),\n  l9: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 6\n  }, this)\n};\n/* export const SelectionSortP= {\n\n  description: (\n    <p>\n    <div className=\"card post\" Style=\"text-align:left\" > \n          <div id=\"screen\" Style=\"margin: 15px\">\n                do <br/> \n                <span id=\"swapped\" Style=\"margin-left:20px\">\n                swapped = false <br/>\n                  </span><br/>\n            <span id=\"change\" Style=\"margin-left:40px\" >\n              for i = 1 to indexOfLastUnsortedElement-1<br/>\n            </span><br/>\n            <span id=\"compare\" className=\"Bar_stateA\" Style=\"margin-left:60px\">\n              if leftElement > rightElement<br/>\n            </span><br/>\n            <span id=\"swap\" Style=\"margin-left:80px\">\n                swap(leftElement, rightElement) <br/> </span><br/>\n            <span id=\"swap\"  Style=\"margin-left:80px\">\n                swapped = true <br/>\n            </span><br/>\n            <span id=\"change\">while swapped</span>\n          </div></div>\n         \n    </p>\n  ),\n \n};\n */\n\nexport const SelectionSortDesc = {\n  title: 'Selection Sort',\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Selection_sort\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: \"Selection Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), ' ', \"is an in-place comparison sorting algorithm that divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this),\n  worstCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this),\n  avgCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this),\n  bestCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this),\n  space: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(1)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 10\n  }, this)\n};\nexport default SelectionSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionSort\");","map":{"version":3,"sources":["D:/CSE499B/visualize-algo/src/components/algorithms/SelectionSort.js"],"names":["React","swap","newTrace","addToTrace","lastSorted","createKey","SelectionSort","nums","trace","i","length","minIndex","j","SelectionSortKey","SelectionSortP","l0","l1","l2","l3","l4","l5","l6","l7","l8","l9","SelectionSortDesc","title","description","worstCase","avgCase","bestCase","space"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createKey\n} from './helpers';\n\nconst SelectionSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  // Core Algorithm\n  for (let i = 0; i < nums.length - 1; i++) {\n    // Internal Loop: Find index of min value\n    let minIndex = i;\n    for (let j = i + 1; j < nums.length; j++) {\n      // Visualize: comparing A[j] to A[minIndex]\n      addToTrace(trace, nums, lastSorted(trace), [minIndex, j]);\n      if (nums[j] < nums[minIndex]) {\n        // Visualize: discovered new minIndex\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\n        minIndex = j;\n        // Visualize: reassign new minIndex;\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\n      }\n    }\n\n    // Visualize: i'th value to be swapped with min value\n    addToTrace(trace, nums, lastSorted(trace), [], [i, minIndex]);\n\n    swap(nums, i, minIndex);\n\n    // Visualize: i'th value has been swapped with min value\n    addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\n  }\n\n  // Visualize: Final item in the array is sorted\n  addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\n\n  return trace;\n};\n\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\n\nexport const SelectionSortP= {\n\n\n\n  l0:(<span Style=\"margin: 0px\"><line>Selection Sort (Array,n)</line></span>),\n\n  l1: (<span Style=\"margin: 15px\"><line> for: i=1 to LastIndex-1 do  </line></span>),\n  l2:(<span Style=\"margin: 25px\">\n  <line >  minimum = i <br/></line></span>\n  ),\n  l3:(<span Style=\"margin: 25px\"><line > for: j= i+ 1 to LastIndex-1 do\n  \n</line></span>\n),\n  l4:(<span Style=\"margin: 40px\"><line alignmentBaseline>\n    {\"if Array[j] < Array[minimum]\"}</line></span>),\n    l5:(<span Style=\"margin: 55px\"><line>minimum = j</line></span>),\n  l6:(<span Style=\"margin: 25px\"><line>swap Array[i] and Array[minimum]</line></span>),\n l7:(<span Style=\"margin: 0px\"><line>end SelectionSort </line></span>),\n l8:(<span Style=\"margin: 0px\"><line></line></span>),\n l9:(<span Style=\"margin: 0px\"><line></line></span>),\n}\n\n/* export const SelectionSortP= {\n\n  description: (\n    <p>\n    <div className=\"card post\" Style=\"text-align:left\" > \n          <div id=\"screen\" Style=\"margin: 15px\">\n                do <br/> \n                <span id=\"swapped\" Style=\"margin-left:20px\">\n                swapped = false <br/>\n                  </span><br/>\n            <span id=\"change\" Style=\"margin-left:40px\" >\n              for i = 1 to indexOfLastUnsortedElement-1<br/>\n            </span><br/>\n            <span id=\"compare\" className=\"Bar_stateA\" Style=\"margin-left:60px\">\n              if leftElement > rightElement<br/>\n            </span><br/>\n            <span id=\"swap\" Style=\"margin-left:80px\">\n                swap(leftElement, rightElement) <br/> </span><br/>\n            <span id=\"swap\"  Style=\"margin-left:80px\">\n                swapped = true <br/>\n            </span><br/>\n            <span id=\"change\">while swapped</span>\n          </div></div>\n         \n    </p>\n  ),\n \n};\n */\n\n\n\n\n\nexport const SelectionSortDesc = {\n  title: 'Selection Sort',\n  description: (\n    <p>\n      <a\n        href=\"https://en.wikipedia.org/wiki/Selection_sort\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Selection Sort\n      </a>{' '}\n      is an in-place comparison sorting algorithm that divides the input\n      list into two parts: the sublist of items already sorted, which is\n      built up from left to right at the front (left) of the list, and\n      the sublist of items remaining to be sorted that occupy the rest\n      of the list. Initially, the sorted sublist is empty and the\n      unsorted sublist is the entire input list. The algorithm proceeds\n      by finding the smallest element in the unsorted sublist,\n      exchanging (swapping) it with the leftmost unsorted element\n      (putting it in sorted order), and moving the sublist boundaries\n      one element to the right.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  space: <span>O(1)</span>\n};\n\nexport default SelectionSort;\n"]},"metadata":{},"sourceType":"module"}