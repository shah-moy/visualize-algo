{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSE499B\\\\visualize-algo\\\\src\\\\components\\\\algorithms\\\\BubbleSort.js\";\nimport React from 'react';\nimport './bubbleSort.css';\nimport { swap, newTrace, addToTrace, lastSorted, createKey } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet a = 2;\nlet b = 2;\n\nconst BubbleSort = nums => {\n  // Set up code for tracing the algorithm\n  const trace = newTrace(nums); // Sorting Algorithm with trace capture\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length - i - 1; j++) {\n      // Visualize: Comparing A[j] and A[j + 1]\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n\n      if (nums[j] > nums[j + 1]) {\n        swap(nums, j, j + 1);\n        a = 1;\n        b = 1; // Visualize: Swap A[j] and A[j + 1]\n\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n      }\n    }\n\n    a = 2;\n    b = 2; // Visualize: final value is sorted\n\n    addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1 - i]);\n  }\n\n  return trace;\n};\n\n_c = BubbleSort;\nexport const psudo = {\n  a: a,\n  b: b\n};\nexport const SortChartR = {\n  title: 'it works'\n};\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\n/*\nexport const SortChart= {\n\n  l1: (\n    <line> do <br/>swapped = false</line> ),\n  l2:(<line>for i = 1 to indexOfLastUnsortedElement-1<br/></line>),\n  l3:(<line>if leftElement > rightElement</line>),\n  l4:(<line>swap(leftElement, rightElement) </line>),\n  l5:(<line>swapped = true</line>),\nl6:(<line>while swapped</line>),\n \n};\n*/\n\nexport const BubbleSortP = {\n  l0: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"begin BubbleSort(array)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this),\n  l1: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 15px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \" for number elements of in Array  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 35\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 8\n  }, this),\n  l2: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: [\"  for all elements of the Array\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this),\n  l3: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"if leftElement > rightElement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 7\n  }, this),\n  l4: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 40px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      alignmentBaseline: true,\n      children: \"swap(leftElement, rightElement) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this),\n  l5: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 25px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"end if\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this),\n  l6: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 10px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {\n      children: \"end inner for\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this),\n  //l7:(<span Style=\"margin: 15px\"><line> end outer for</line></span>),\n  //l8:(<span Style=\"margin: 0px\"><line>end BubbleSort</line></span>),\n  l9: /*#__PURE__*/_jsxDEV(\"span\", {\n    Style: \"margin: 0px\",\n    children: /*#__PURE__*/_jsxDEV(\"line\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 6\n  }, this)\n};\nexport const BubbleSortDesc = {\n  title: 'Bubble Sort',\n  description: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Bubble_sort\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: \"Bubble Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), ' ', \"is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \\\"bubble\\\" to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this),\n  worstCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this),\n  avgCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"O(n\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this),\n  bestCase: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(n)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 13\n  }, this),\n  space: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"O(1)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 10\n  }, this)\n  /**  ps:(  <p>\n     <div className=\"card post\" Style=\"text-align:left\" > \n           <div id=\"screen\" Style=\"margin: 15px\">\n                 do <br/> \n                 <span id=\"swapped\" Style=\"margin-left:20px\">\n                 swapped = false <br/>\n                   </span><br/>\n             <span id=\"change\" Style=\"margin-left:40px\" >\n               for i = 1 to indexOfLastUnsortedElement-1<br/>\n             </span><br/>\n             <span id=\"compare\" className=\"Bar_stateA\" Style=\"margin-left:60px\">\n               if leftElement > rightElement<br/>\n             </span><br/>\n             <span id=\"swap\" Style=\"margin-left:80px\">\n                 swap(leftElement, rightElement) <br/> </span><br/>\n             <span id=\"swap\"  Style=\"margin-left:80px\">\n                 swapped = true <br/>\n             </span><br/>\n             <span id=\"change\">while swapped</span>\n           </div></div>\n          \n     </p> )\n     */\n\n};\nexport default BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["D:/CSE499B/visualize-algo/src/components/algorithms/BubbleSort.js"],"names":["React","swap","newTrace","addToTrace","lastSorted","createKey","a","b","BubbleSort","nums","trace","i","length","j","psudo","SortChartR","title","BubbleSortKey","BubbleSortP","l0","l1","l2","l3","l4","l5","l6","l9","BubbleSortDesc","description","worstCase","avgCase","bestCase","space"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './bubbleSort.css';\n\nimport {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createKey\n} from './helpers';\n\n let a=2;\nlet b=2;\nconst BubbleSort = (nums) => {\n  // Set up code for tracing the algorithm\n  const trace = newTrace(nums);\n\n  // Sorting Algorithm with trace capture\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length - i - 1; j++) {\n      // Visualize: Comparing A[j] and A[j + 1]\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\n      \n      if (nums[j] > nums[j + 1]) {\n        swap(nums, j, j + 1);\n      a=1;\n      b=1;\n      \n        // Visualize: Swap A[j] and A[j + 1]\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\n      }\n    }\n  \na=2;\nb=2;\n    // Visualize: final value is sorted\n    addToTrace(trace, nums, [\n      ...lastSorted(trace),\n      nums.length - 1 - i\n    ]);\n  }\n\n\n  return (trace\n    \n    );\n};\n\nexport const psudo={\n  a:a,\n  b:b,\n\n}\nexport const SortChartR ={\n  title: 'it works'\n}\n\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\n\n/*\nexport const SortChart= {\n\n  l1: (\n    <line> do <br/>swapped = false</line> ),\n  l2:(<line>for i = 1 to indexOfLastUnsortedElement-1<br/></line>),\n  l3:(<line>if leftElement > rightElement</line>),\n  l4:(<line>swap(leftElement, rightElement) </line>),\n  l5:(<line>swapped = true</line>),\nl6:(<line>while swapped</line>),\n \n};\n*/\n\n\nexport const BubbleSortP= {\n  l0:(<span Style=\"margin: 0px\"><line>begin BubbleSort(array)</line></span>),\n\n  l1: (<span Style=\"margin: 15px\"><line> for number elements of in Array  </line></span>),\n  l2:(<span Style=\"margin: 25px\">\n  <line >  for all elements of the Array<br/></line></span>\n  ),\n  l3:(<span Style=\"margin: 25px\"><line >\n  {\"if leftElement > rightElement\"}\n</line></span>\n),\n  l4:(<span Style=\"margin: 40px\"><line alignmentBaseline>\n    swap(leftElement, rightElement) </line></span>),\n    l5:(<span Style=\"margin: 25px\"><line>end if</line></span>),\n  l6:(<span Style=\"margin: 10px\"><line>end inner for</line></span>),\n //l7:(<span Style=\"margin: 15px\"><line> end outer for</line></span>),\n //l8:(<span Style=\"margin: 0px\"><line>end BubbleSort</line></span>),\n l9:(<span Style=\"margin: 0px\"><line></line></span>),\n \n};\n\n\n\n\n\n\nexport const BubbleSortDesc = {\n  title: 'Bubble Sort',\n  description: (\n    <p>\n      <a\n        href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Bubble Sort\n      </a>{' '}\n      is a simple sorting algorithm that repeatedly steps through the\n      list, compares adjacent elements and swaps them if they are in the\n      wrong order.The pass through the list is repeated until the list\n      is sorted. The algorithm, which is a comparison sort, is named for\n      the way smaller or larger elements \"bubble\" to the top of the\n      list. Although the algorithm is simple, it is too slow and\n      impractical for most problems\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: <span>O(n)</span>,\n\n  space: <span>O(1)</span>,\n /**  ps:(  <p>\n    <div className=\"card post\" Style=\"text-align:left\" > \n          <div id=\"screen\" Style=\"margin: 15px\">\n                do <br/> \n                <span id=\"swapped\" Style=\"margin-left:20px\">\n                swapped = false <br/>\n                  </span><br/>\n            <span id=\"change\" Style=\"margin-left:40px\" >\n              for i = 1 to indexOfLastUnsortedElement-1<br/>\n            </span><br/>\n            <span id=\"compare\" className=\"Bar_stateA\" Style=\"margin-left:60px\">\n              if leftElement > rightElement<br/>\n            </span><br/>\n            <span id=\"swap\" Style=\"margin-left:80px\">\n                swap(leftElement, rightElement) <br/> </span><br/>\n            <span id=\"swap\"  Style=\"margin-left:80px\">\n                swapped = true <br/>\n            </span><br/>\n            <span id=\"change\">while swapped</span>\n          </div></div>\n         \n    </p> )\n    */\n};\nexport default BubbleSort;\n"]},"metadata":{},"sourceType":"module"}