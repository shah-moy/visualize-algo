{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSE499B\\\\visualize-algo\\\\src\\\\components\\\\Khwarizmi\\\\index.js\";\nimport React, { Component } from 'react';\nimport './style.css';\nimport Controls from '../celling/Controls';\nimport TopBar from '../middle/TopBar';\nimport Drawer from '../celling/Drawer';\nimport SortVisualizer from '../floor/SortVisualizer';\nimport BubbleSort, { BubbleSortKey, BubbleSortDesc, BubbleSortP } from '../algorithms/BubbleSort';\nimport SelectionSort, { SelectionSortKey, SelectionSortDesc, SelectionSortP } from '../algorithms/SelectionSort';\nimport InsertionSort, { InsertionSortKey, InsertionSortDesc, InsertionSortP } from '../algorithms/InsertionSort';\nimport MergeSort, { MergeSortKey, MergeSortDesc, MergeSortP } from '../algorithms/MergeSort';\nimport QuickSort, { QuickSortKey, QuickSortDesc, QuickSortP } from '../algorithms/QuickSort';\nimport QuickSort3, { QuickSort3Key, QuickSort3Desc } from '../algorithms/QuickSort3';\nimport HeapSort, { HeapSortKey, HeapSortDesc, HeapSortP } from '../algorithms/HeapSort';\nimport ShellSort, { ShellSortKey, ShellSortDesc, ShellSortP } from '../algorithms/ShellSort';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Khwarizmi extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      arraySize: 10,\n      trace: [],\n      algorithm: null,\n      appDrawerOpen: false\n    };\n\n    this.saveInput = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.ALGORITHM = {\n      'Bubble Sort': BubbleSort,\n      'Selection Sort': SelectionSort,\n      'Insertion Sort': InsertionSort,\n      'Merge Sort': MergeSort,\n      'Quick Sort': QuickSort,\n      'Quick Sort 3': QuickSort3,\n      'Heap Sort': HeapSort,\n      'Shell Sort': ShellSort\n    };\n    this.ALGORITHM_KEY = {\n      'Bubble Sort': BubbleSortKey,\n      'Selection Sort': SelectionSortKey,\n      'Insertion Sort': InsertionSortKey,\n      'Merge Sort': MergeSortKey,\n      'Quick Sort': QuickSortKey,\n      'Quick Sort 3': QuickSort3Key,\n      'Heap Sort': HeapSortKey,\n      'Shell Sort': ShellSortKey\n    };\n    this.ALGORITHM_DESC = {\n      'Bubble Sort': BubbleSortDesc,\n      'Selection Sort': SelectionSortDesc,\n      'Insertion Sort': InsertionSortDesc,\n      'Merge Sort': MergeSortDesc,\n      'Quick Sort': QuickSortDesc,\n      'Quick Sort 3': QuickSort3Desc,\n      'Heap Sort': HeapSortDesc,\n      'Shell Sort': ShellSortDesc\n    };\n    this.ALGORITHM_P = {\n      'Bubble Sort': BubbleSortP,\n      'Selection Sort': SelectionSortP,\n      'Insertion Sort': InsertionSortP,\n      'Merge Sort': MergeSortP,\n      'Quick Sort': QuickSortP,\n      'Heap Sort': HeapSortP,\n      'Shell Sort': ShellSortP\n    };\n\n    this.generateRandomArray = () => {\n      // Generate pseudo-random number between 1 and max\n      function getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max)) + 1;\n      } // Generate an array of length max\n\n\n      const array = Array(this.state.arraySize).fill(0).map(() => getRandomInt(this.state.arraySize * 5));\n      this.setState({\n        array,\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.deletewholeArray = array => {\n      while (array) {\n        this.array.pop();\n      }\n\n      this.setState({\n        array: [],\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.deleteArray = array => {\n      this.state.array.pop();\n      this.setState({\n        array: [...this.state.array],\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.insertwithIndex = (array, index) => {\n      let y = document.getElementById(\"array2\").value;\n      let c = parseInt(y);\n      let b = document.getElementById(\"index\").value;\n      let d = parseInt(b);\n      /*console.log(array.join()); \r\n      array.splice(d, 0, c);\r\n      console.log(array.join());*/\n      //array.insert(d,c);\n      //just to avoid error\n\n      this.state.array.push(c);\n      this.setState({\n        array: [...this.state.array],\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.insertArray = array => {\n      let y = document.getElementById(\"array\").value;\n      let c = parseInt(y);\n      this.state.array.push(c);\n      this.setState({\n        array: [...this.state.array],\n        trace: []\n      }, this.createTrace); //console.log(array)\n    };\n\n    this.handleAlgorithmChange = algorithm => {\n      this.setState({\n        algorithm\n      }, this.generateRandomArray);\n    };\n\n    this.handleArraySizeChange = size => {\n      size = Number(size);\n      size = size > 100 ? 100 : size;\n      size = size < 0 ? 0 : size;\n      this.setState({\n        arraySize: size\n      }, this.generateRandomArray);\n    };\n\n    this.createTrace = () => {\n      const numbers = [...this.state.array];\n      const sort = this.ALGORITHM[this.state.algorithm];\n\n      if (sort) {\n        const trace = sort(numbers);\n        this.setState({\n          trace\n        });\n      }\n    };\n\n    this.toggleDrawer = () => {\n      this.setState(prevState => ({\n        drawerOpen: !prevState.drawerOpen\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.generateRandomArray();\n  }\n\n  render() {\n    let theme = `Khwarizmi`;\n    if (this.state.drawerOpen) theme += ` Khwarizmi_modal_open`;\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\n    const desP = this.ALGORITHM_P[this.state.algorithm];\n\n    const controls = /*#__PURE__*/_jsxDEV(Controls, {\n      onGenerateRandomArray: this.generateRandomArray,\n      algorithm: this.state.algorithm,\n      onAlgorithmChange: this.handleAlgorithmChange,\n      insertArray: this.insertArray,\n      insertwithIndex: this.insertwithIndex,\n      deleteArray: this.deleteArray,\n      deletewholeArray: this.deletewholeArray,\n      arraySize: this.state.arraySize,\n      onArraySizeChange: this.handleArraySizeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: theme,\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {\n        drawerOpen: this.state.drawerOpen,\n        toggleDrawer: this.toggleDrawer,\n        children: controls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n        open: this.state.drawerOpen,\n        closeDrawer: this.toggleDrawer,\n        children: controls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"Khwarizmi__Body\",\n        children: /*#__PURE__*/_jsxDEV(SortVisualizer, {\n          array: this.state.array,\n          trace: this.state.trace,\n          colorKey: colorKey,\n          desc: desc,\n          desP: desP\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Khwarizmi;","map":{"version":3,"sources":["D:/CSE499B/visualize-algo/src/components/Khwarizmi/index.js"],"names":["React","Component","Controls","TopBar","Drawer","SortVisualizer","BubbleSort","BubbleSortKey","BubbleSortDesc","BubbleSortP","SelectionSort","SelectionSortKey","SelectionSortDesc","SelectionSortP","InsertionSort","InsertionSortKey","InsertionSortDesc","InsertionSortP","MergeSort","MergeSortKey","MergeSortDesc","MergeSortP","QuickSort","QuickSortKey","QuickSortDesc","QuickSortP","QuickSort3","QuickSort3Key","QuickSort3Desc","HeapSort","HeapSortKey","HeapSortDesc","HeapSortP","ShellSort","ShellSortKey","ShellSortDesc","ShellSortP","Khwarizmi","state","array","arraySize","trace","algorithm","appDrawerOpen","saveInput","e","setState","input","target","value","ALGORITHM","ALGORITHM_KEY","ALGORITHM_DESC","ALGORITHM_P","generateRandomArray","getRandomInt","max","Math","floor","random","Array","fill","map","createTrace","deletewholeArray","pop","deleteArray","insertwithIndex","index","y","document","getElementById","c","parseInt","b","d","push","insertArray","handleAlgorithmChange","handleArraySizeChange","size","Number","numbers","sort","toggleDrawer","prevState","drawerOpen","componentDidMount","render","theme","colorKey","desc","desP","controls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nimport Controls from '../celling/Controls';\r\nimport TopBar from '../middle/TopBar';\r\nimport Drawer from '../celling/Drawer';\r\nimport SortVisualizer from '../floor/SortVisualizer';\r\n\r\nimport BubbleSort, {\r\n  BubbleSortKey,\r\n  BubbleSortDesc,\r\n  BubbleSortP\r\n} from '../algorithms/BubbleSort';\r\nimport SelectionSort, {\r\n  SelectionSortKey,\r\n  SelectionSortDesc,\r\n  SelectionSortP\r\n} from '../algorithms/SelectionSort';\r\nimport InsertionSort, {\r\n  InsertionSortKey,\r\n  InsertionSortDesc,\r\n  InsertionSortP\r\n} from '../algorithms/InsertionSort';\r\nimport MergeSort, {\r\n  MergeSortKey,\r\n  MergeSortDesc,\r\n  MergeSortP\r\n} from '../algorithms/MergeSort';\r\nimport QuickSort, {\r\n  QuickSortKey,\r\n  QuickSortDesc,\r\n  QuickSortP\r\n} from '../algorithms/QuickSort';\r\nimport QuickSort3, {\r\n  QuickSort3Key,\r\n  QuickSort3Desc\r\n} from '../algorithms/QuickSort3';\r\nimport HeapSort, {\r\n  HeapSortKey,\r\n  HeapSortDesc,\r\n  HeapSortP\r\n} from '../algorithms/HeapSort';\r\nimport ShellSort, {\r\n  ShellSortKey,\r\n  ShellSortDesc,\r\n  ShellSortP\r\n} from '../algorithms/ShellSort';\r\n\r\nclass Khwarizmi extends Component {\r\n  state = {\r\n    array: [],\r\n    arraySize: 10,\r\n    trace: [],\r\n    algorithm: null,\r\n    appDrawerOpen: false\r\n  };\r\n\r\n  saveInput = (e) => {\r\n    this.setState({ input: e.target.value });\r\n  };\r\n\r\n  ALGORITHM = {\r\n    'Bubble Sort': BubbleSort,\r\n    'Selection Sort': SelectionSort,\r\n    'Insertion Sort': InsertionSort,\r\n    'Merge Sort': MergeSort,\r\n    'Quick Sort': QuickSort,\r\n    'Quick Sort 3': QuickSort3,\r\n    'Heap Sort': HeapSort,\r\n    'Shell Sort': ShellSort\r\n  };\r\n\r\n  ALGORITHM_KEY = {\r\n    'Bubble Sort': BubbleSortKey,\r\n    'Selection Sort': SelectionSortKey,\r\n    'Insertion Sort': InsertionSortKey,\r\n    'Merge Sort': MergeSortKey,\r\n    'Quick Sort': QuickSortKey,\r\n    'Quick Sort 3': QuickSort3Key,\r\n    'Heap Sort': HeapSortKey,\r\n    'Shell Sort': ShellSortKey\r\n  };\r\n\r\n  ALGORITHM_DESC = {\r\n    'Bubble Sort': BubbleSortDesc,\r\n    'Selection Sort': SelectionSortDesc,\r\n    'Insertion Sort': InsertionSortDesc,\r\n    'Merge Sort': MergeSortDesc,\r\n    'Quick Sort': QuickSortDesc,\r\n    'Quick Sort 3': QuickSort3Desc,\r\n    'Heap Sort': HeapSortDesc,\r\n    'Shell Sort': ShellSortDesc\r\n  };\r\n  ALGORITHM_P = {\r\n    'Bubble Sort': BubbleSortP,\r\n    'Selection Sort': SelectionSortP,\r\n    'Insertion Sort': InsertionSortP,\r\n    'Merge Sort': MergeSortP,\r\n    'Quick Sort': QuickSortP,\r\n    \r\n    'Heap Sort': HeapSortP,\r\n    'Shell Sort': ShellSortP\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n  \r\n\r\n  generateRandomArray = () => {\r\n    // Generate pseudo-random number between 1 and max\r\n    function getRandomInt(max) {\r\n      return Math.floor(Math.random() * Math.floor(max)) + 1;\r\n    }\r\n\r\n    // Generate an array of length max\r\n    const array = Array(this.state.arraySize)\r\n      .fill(0)\r\n      .map(() => getRandomInt(this.state.arraySize * 5));\r\n\r\n    this.setState(\r\n      {\r\n        array,\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  };\r\n\r\n  deletewholeArray = (array) => {\r\n    while(array){\r\n    this.array.pop();}\r\n    this.setState(\r\n      {\r\n        array:[],\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  };\r\n\r\n  deleteArray = (array) => {\r\n    this.state.array.pop();\r\n    this.setState(\r\n      {\r\n        array:[...this.state.array],\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  };\r\n  insertwithIndex=(array ,index)=>{\r\n    let y = document.getElementById(\"array2\").value;\r\n    let c = parseInt(y);\r\n    let b = document.getElementById(\"index\").value;\r\n    let d = parseInt(b);\r\n    /*console.log(array.join()); \r\narray.splice(d, 0, c);\r\nconsole.log(array.join());*/\r\n\r\n//array.insert(d,c);\r\n\r\n//just to avoid error\r\nthis.state.array.push(c);\r\n    this.setState(\r\n      {\r\n        array:[...this.state.array],\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  }\r\n\r\n  insertArray =(array) => {\r\n    \r\n    let y = document.getElementById(\"array\").value;\r\n    let c = parseInt(y)\r\n\r\n    this.state.array.push(c);\r\n    this.setState(\r\n      {\r\n        array:[...this.state.array],\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n    //console.log(array)\r\n  };\r\n\r\n  handleAlgorithmChange = (algorithm) => {\r\n    this.setState({ algorithm }, this.generateRandomArray);\r\n  };\r\n  \r\n  handleArraySizeChange = (size) => {\r\n    size = Number(size);\r\n    size = size > 100 ? 100 : size;\r\n    size = size < 0 ? 0 : size;\r\n    this.setState({ arraySize: size }, this.generateRandomArray);\r\n  };\r\n\r\n  createTrace = () => {\r\n    const numbers = [...this.state.array];\r\n    const sort = this.ALGORITHM[this.state.algorithm];\r\n    if (sort) {\r\n      const trace = sort(numbers);\r\n      this.setState({ trace });\r\n    }\r\n  };\r\n\r\n  toggleDrawer = () => {\r\n    this.setState((prevState) => ({\r\n      drawerOpen: !prevState.drawerOpen\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let theme = `Khwarizmi`;\r\n    if (this.state.drawerOpen) theme += ` Khwarizmi_modal_open`;\r\n\r\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\r\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\r\n    const desP = this.ALGORITHM_P[this.state.algorithm];\r\n    \r\n\r\n    const controls = (\r\n\r\n\r\n      <Controls\r\n        onGenerateRandomArray={this.generateRandomArray}\r\n        algorithm={this.state.algorithm}\r\n        onAlgorithmChange={this.handleAlgorithmChange}\r\n        insertArray={this.insertArray}\r\n        insertwithIndex={this.insertwithIndex}\r\n        deleteArray={this.deleteArray}\r\n        deletewholeArray={this.deletewholeArray}\r\n        arraySize={this.state.arraySize}\r\n        onArraySizeChange={this.handleArraySizeChange}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className={theme}>\r\n        <TopBar\r\n          drawerOpen={this.state.drawerOpen}\r\n          toggleDrawer={this.toggleDrawer}\r\n        >\r\n          {controls}\r\n        </TopBar>\r\n\r\n        <Drawer\r\n          open={this.state.drawerOpen}\r\n          closeDrawer={this.toggleDrawer}\r\n        >\r\n          {controls}\r\n        </Drawer>\r\n\r\n        <main className=\"Khwarizmi__Body\">\r\n          <SortVisualizer\r\n            array={this.state.array}\r\n            trace={this.state.trace}\r\n            colorKey={colorKey}\r\n            desc={desc}\r\n            desP={desP}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Khwarizmi;"]},"metadata":{},"sourceType":"module"}